diff --git a/node_modules/ng-packagr/lib/flatten/rollup.d.ts b/node_modules/ng-packagr/lib/flatten/rollup.d.ts
index 15f81f1..501b08d 100644
--- a/node_modules/ng-packagr/lib/flatten/rollup.d.ts
+++ b/node_modules/ng-packagr/lib/flatten/rollup.d.ts
@@ -11,6 +11,7 @@ export interface RollupOptions {
     entryName: string;
     dir: string;
     sourceRoot: string;
+    format?: string;
     cache?: RollupCache;
     cacheDirectory?: string | false;
     fileCache: OutputFileCache;
diff --git a/node_modules/ng-packagr/lib/flatten/rollup.js b/node_modules/ng-packagr/lib/flatten/rollup.js
index 3c1f14d..d198bf6 100644
--- a/node_modules/ng-packagr/lib/flatten/rollup.js
+++ b/node_modules/ng-packagr/lib/flatten/rollup.js
@@ -30,9 +30,12 @@ exports.rollupBundleFile = rollupBundleFile;
 const plugin_json_1 = __importDefault(require("@rollup/plugin-json"));
 const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
 const path = __importStar(require("path"));
+const terser = require("@rollup/plugin-terser");
 const cache_1 = require("../utils/cache");
 const log = __importStar(require("../utils/log"));
 const file_loader_plugin_1 = require("./file-loader-plugin");
+const fs = require('fs');
+const os = require('os');
 let rollup;
 /** Runs rollup over the given entry file, writes a bundle file. */
 async function rollupBundleFile(opts) {
@@ -41,12 +44,25 @@ async function rollupBundleFile(opts) {
     log.debug(`rollup (v${rollup.VERSION}) ${opts.entry} to ${opts.dir}`);
     const cacheDirectory = opts.cacheDirectory;
     // Create the bundle
+    const data = fs.readFileSync(path.join(__dirname, '../../../thingsboard/src/app/modules/common/modules-map.ts'), 'utf8');
+    const reg = /private modulesMap: {\[key: string\]: any} = {([^;]*)};/gsm;
+    const regMatch = reg.exec(data);
+    const modulesStr = regMatch[1];
+    const externalModuleIds = [];
+    modulesStr.split(',' + os.EOL).forEach(
+          (line) => {
+            const moduleId = line.trim().split(":")[0].replaceAll("'", "").trim();
+            if (moduleId.length) {
+                externalModuleIds.push(moduleId);
+              }
+          }
+    );
     const bundle = await rollup.rollup({
         context: 'this',
-        external: moduleId => isExternalDependency(moduleId),
+        external: moduleId => isExternalDependency(moduleId, externalModuleIds),
         cache: (_a = opts.cache) !== null && _a !== void 0 ? _a : (cacheDirectory ? await (0, cache_1.readCacheEntry)(cacheDirectory, opts.cacheKey) : undefined),
         input: opts.entry,
-        plugins: [(0, plugin_node_resolve_1.default)(), (0, plugin_json_1.default)(), (0, file_loader_plugin_1.fileLoaderPlugin)(opts.fileCache)],
+        plugins: [(0, plugin_node_resolve_1.default)(), (0, plugin_json_1.default)(), terser()],
         onwarn: warning => {
             switch (warning.code) {
                 case 'CIRCULAR_DEPENDENCY':
@@ -66,12 +82,13 @@ async function rollupBundleFile(opts) {
     // Output the bundle to disk
     const output = await bundle.write({
         name: opts.moduleName,
-        format: 'es',
+        format: opts.format || 'es',
         dir: opts.dir,
         inlineDynamicImports: false,
         hoistTransitiveImports: false,
-        chunkFileNames: opts.entryName + '-[name]-[hash].mjs',
-        entryFileNames: opts.entryName + '.mjs',
+        chunkFileNames: opts.entryName + '-[name]-[hash]' + (opts.entryExt || '.mjs'),
+        entryFileNames: opts.entryName + (opts.entryExt || '.mjs'),
+        compact: true,
         banner: '',
         sourcemap: true,
     });
@@ -98,13 +115,16 @@ async function ensureRollup() {
         log.debug(`rollup using wasm version.`);
     }
 }
-function isExternalDependency(moduleId) {
+function isExternalDependency(moduleId, externalModuleIds) {
     // more information about why we don't check for 'node_modules' path
     // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632
     if (moduleId.startsWith('.') || moduleId.startsWith('/') || path.isAbsolute(moduleId)) {
         // if it's either 'absolute', marked to embed, starts with a '.' or '/' or is the umd bundle and is tslib
         return false;
     }
+    if (externalModuleIds.indexOf(moduleId) === -1) {
+        return false;
+    }
     return true;
 }
 //# sourceMappingURL=rollup.js.map
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
index 35d78ad..270e8ad 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
@@ -8,10 +8,14 @@ export interface DestinationFiles {
     fesm2022: string;
     /** Absolute path of this entry point `ESM2022` module */
     esm2022: string;
+    /** Absolute path of this entry point `SystemJS` module */
+    system: string;
     /** Sub path of entrypoint distributable. */
     directory: string;
     /** Absolute path of this entry point `FESM2022` directory */
     fesm2022Dir: string;
+    /** Absolute path of this entry point `SystemJS` directory */
+    systemDir: string;
 }
 /**
  * An entry point - quoting Angular Package Format - is:
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
index b2eedc6..3f827c7 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
@@ -103,6 +103,8 @@ class NgEntryPoint {
             esm2022: pathJoinWithDest('esm2022', secondaryDir, `${flatModuleFile}.mjs`),
             fesm2022: pathJoinWithDest('fesm2022', `${flatModuleFile}.mjs`),
             fesm2022Dir: pathJoinWithDest('fesm2022'),
+            systemDir: pathJoinWithDest('system'),
+            system: pathJoinWithDest('system', `${flatModuleFile}.js`)
         };
     }
     $get(key) {
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js b/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
index 198aaea..9de4180 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
@@ -15,12 +15,12 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
     const entryPoint = graph.find((0, nodes_1.isEntryPointInProgress)());
     const { destinationFiles, entryPoint: ngEntryPoint, tsConfig } = entryPoint.data;
     const cache = entryPoint.cache;
-    const { fesm2022Dir, esm2022 } = destinationFiles;
+    const { fesm2022Dir, esm2022, systemDir, system } = destinationFiles;
     const spinner = (0, ora_1.default)({
         hideCursor: false,
         discardStdin: false,
     });
-    const key = await (0, cache_1.generateKey)(ngEntryPoint.moduleId, esm2022, fesm2022Dir, tsConfig.options.compilationMode);
+    const key = await (0, cache_1.generateKey)(ngEntryPoint.moduleId, esm2022, systemDir, tsConfig.options.compilationMode);
     const hash = await (0, cache_1.generateKey)([...cache.outputCache.values()].map(({ version }) => version).join(':'));
     const cacheDirectory = options.cacheEnabled && options.cacheDirectory;
     if (cacheDirectory) {
@@ -40,13 +40,25 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
                     }
                     await (0, fs_1.writeFile)(filePath, file.type === 'asset' ? file.source : file.code);
                 }
+                for (const file of cacheResult.system) {
+                    const filePath = (0, path_1.join)(systemDir, file.fileName);
+                    if (options.watch && await (0, fs_1.exists)(filePath)) {
+                      continue;
+                    }
+                    if (!writing) {
+                      writing = true;
+                      spinner.start('Writing SystemJS bundles');
+                      await (0, fs_1.mkdir)(systemDir, { recursive: true });
+                    }
+                    await (0, fs_1.writeFile)(filePath, file.type === 'asset' ? file.source : file.code);
+                }
                 if (writing) {
-                    spinner.succeed('Writing FESM bundles');
+                    spinner.succeed('Writing SystemJS bundles');
                 }
             }
             catch (error) {
                 if (!writing) {
-                    spinner.start('Writing FESM bundles');
+                    spinner.start('Writing SystemJS bundles');
                 }
                 spinner.fail();
                 throw error;
@@ -54,20 +66,22 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
             return;
         }
     }
-    async function generateFESM(rollupCache, dir) {
+/*
+    async function generateFESM(rollupCache, dir, format) {
         const { cache: rollupFESMCache, files } = await (0, rollup_1.rollupBundleFile)({
             sourceRoot: tsConfig.options.sourceRoot,
             entry: esm2022,
             entryName: ngEntryPoint.flatModuleFile,
             moduleName: ngEntryPoint.moduleId,
             dir,
+            format,
             cache: rollupCache,
             cacheDirectory,
             fileCache: cache.outputCache,
             cacheKey: await (0, cache_1.generateKey)(esm2022, dir, ngEntryPoint.moduleId, tsConfig.options.compilationMode),
         });
         return {
-            /** The map contents are in an asset file type, which makes storing the map in the cache as redudant. */
+            // The map contents are in an asset file type, which makes storing the map in the cache as redudant.
             files: files.map(f => {
                 if (f.type === 'chunk') {
                     f.map = null;
@@ -81,7 +95,7 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
         hash,
     };
     try {
-        const { rollupCache, files } = await generateFESM(cache.rollupFESM2022Cache, fesm2022Dir);
+        const { rollupCache, files } = await generateFESM(cache.rollupFESM2022Cache, fesm2022Dir, 'es');
         cache.rollupFESM2022Cache = rollupCache;
         fesmCache.fesm2022 = files;
         spinner.succeed(`Generating FESM bundles`);
@@ -92,7 +106,32 @@ const writeBundlesTransform = (options) => (0, transform_1.transformFromPromise)
     }
     if (cacheDirectory) {
         await (0, cache_1.saveCacheEntry)(cacheDirectory, key, JSON.stringify(fesmCache));
-    }
+    }*/
+   try {
+            spinner.start('Generating SystemJS');
+            const { cache: rollupSystemJsCache, files } = await (0, rollup_1.rollupBundleFile)({
+              sourceRoot: tsConfig.options.sourceRoot,
+              entry: esm2022,
+              entryName: ngEntryPoint.flatModuleFile,
+              entryExt: '.js',
+              moduleName: null, // ngEntryPoint.moduleId,
+              format: 'system',
+              dir: systemDir,
+              downlevel: false,
+              cache: cache.rollupSystemJsCache,
+              cacheDirectory,
+              fileCache: cache.outputCache,
+              cacheKey: await (0, cache_1.generateKey)(esm2022, systemDir, ngEntryPoint.moduleId, tsConfig.options.compilationMode),
+            });
+          spinner.succeed();
+          if (options.watch) {
+              cache.rollupSystemJsCache = rollupSystemJsCache;
+          }
+  }
+  catch (error) {
+     spinner.fail();
+     throw error;
+  }
 });
 exports.writeBundlesTransform = writeBundlesTransform;
 //# sourceMappingURL=write-bundles.transform.js.map
